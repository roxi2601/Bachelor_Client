@page "/WorkerConfigurationsList"
@using Bachelor_Client.Models.WorkerConfiguration
@using Bachelor_Client.Pages.WorkerConfiguration.DeleteWorkerConfig
@using Bachelor_Client.Pages.WorkerConfiguration.SendRequest
@using Bachelor_Client.Services.Rest
@using Bachelor_Client.Services.WorkerConfig
@using Microsoft.AspNetCore.Components.Authorization
@inject NavigationManager NavigationManager
@inject IRestService RestService
@inject IWorkerConfigService WorkerConfigService
@inject AuthenticationStateProvider AuthenticationStateProvider
<CascadingAuthenticationState>
  <AuthorizeView Policy="loggedAccount">
    <Authorized>

    <div class="worker-configlist py-4">

                                    
        <div class="container">
            <div class="row">
                <input  class="form-control" type="text" placeholder="Search..." style="width: 15%; height: 5%; background-color: transparent; border: none; margin-left: 82%" />
            </div>
            <div class="row">
                <div class="col-lg-12">
                    <div style="color: black">
                        <div class="card-header bg-transparent text-center">

                        </div>
                        <div class="card-body">


                            @if (WorkerConfigList.Count == 0)
                            {
                                <div class="spinner"></div>
                                 
                                <p>
                                    <em>@errorMessage</em>
                                </p>
                            }
                            else
                            {
                                <table class='table' style=" color: black">
                                    <thead>
                                    <tr>
                                        <th class="url" style="width: 35%">Worker Configuration</th>
                                        <th class="requestType" style="width: 15%">Request Type</th>
                                        <th class="authType" style="width: 15%">Authorization Type</th>
                                        <th class="bodyType" style="width: 15%">Body Type</th>
                                        <th class="actions" style="width: 30%">Actions</th>
                                    </tr>
                                    </thead>
                                    <tbody>

                                    @foreach(var workerConfig in WorkerConfigList)
                                    {
                                        <tr>
                                            <td>@workerConfig.url</td>
                                            <td>@workerConfig.requestType</td>
                                            <td>@workerConfig.authorizationType</td>
                                            <td>@workerConfig.bodyType</td>
                                                
                                            <td>
                                                <button class="btn" @onclick="() => NavigateToEdit(workerConfig.ID)"><i class="fa fa-edit"></i> </button>
                                                <button class="btn" @onclick="() => DeleteWorkerConfig(workerConfig, true)"><i class="fa fa-trash"></i> </button>
                                                <button class="btn" @onclick="() => GenerateAPICall(workerConfig, true)">Send</button>
                                            </td>
                                        </tr>
                                    }
                                    </tbody>
                                </table>
                            }
                        </div>
                    </div>
                </div>

            </div>
        </div>
    </div>
        </Authorized>
      </AuthorizeView>
    </CascadingAuthenticationState>
 <DeleteWorkerConfig @ref="DeleteWorkerConfigConfirmation" ConfirmationChanged="DeleteWorkerConfig_Click"
                   />
<SendRequestConfirm @ref="GenerateAPICallConfirmation" ConfirmationChanged="GenerateAPICall_Click" />

@code {
    public List<WorkerConfigurationModel> WorkerConfigList = new();
    private SendRequestBase GenerateAPICallConfirmation { get; set; }
    private DeleteWorkerConfigBase DeleteWorkerConfigConfirmation { get; set; }
    private string errorMessage = "";

   

    protected override async Task OnInitializedAsync()
    {
        await Task.Run(LoadItems);
    }

    private async void LoadItems()
    {
        Thread.Sleep(2000);
        WorkerConfigList = await WorkerConfigService.ReadAllWorkerConfigurations();
    }

    private async Task DeleteWorkerConfig(WorkerConfigurationModel workerConfigurationModel, bool confirmed)
    {
        DeleteWorkerConfigConfirmation.URL = workerConfigurationModel.url;
        DeleteWorkerConfigConfirmation.ConfirmationMessage = "Are you sure you want to delete worker configuration for " + DeleteWorkerConfigConfirmation.URL + " ?";
        DeleteWorkerConfig_Click(confirmed);
        await WorkerConfigService.DeleteWorkerConfiguration(workerConfigurationModel.ID);
    }
    private void DeleteWorkerConfig_Click(bool confirmed)
    {
        if (confirmed)
        {
            DeleteWorkerConfigConfirmation.Show();
        }
        
    }
    
    private async Task GenerateAPICall(WorkerConfigurationModel workerConfigurationModel, bool confirmed)
    {
        
        GenerateAPICallConfirmation.Content =
            await RestService.GenerateRequest(workerConfigurationModel, workerConfigurationModel.requestType + workerConfigurationModel.bodyType);
        GenerateAPICall_Click(confirmed);
    // switch (workerConfigurationModel.requestType)
       //          {
       //              case "get":
       //                  GenerateAPICallConfirmation.Content = await RestService.GenerateGetRequest(workerConfigurationModel);
       //                  GenerateAPICall_Click(confirmed);
       //                  break;
       //              case "post":
       //                  switch (workerConfigurationModel.bodyType)
       //                  {
       //                      case "raw":
       //                          GenerateAPICallConfirmation.Content = await RestService.GeneratePostRequestRaw(workerConfigurationModel,
       //                              workerConfigurationModel.RawModel.Text);
       //                          GenerateAPICall_Click(confirmed);
       //                          break;
       //                      case "form-data":
       //                          GenerateAPICallConfirmation.Content = await RestService.GeneratePostRequestFormData(workerConfigurationModel,
       //                              workerConfigurationModel.FormDataModel);
       //                          GenerateAPICall_Click(confirmed);
       //                          break;
       //                  }
       //                 
       //                  break;
       //              case "put":
       //                  switch (workerConfigurationModel.bodyType)
       //                  {
       //                      case "raw":
       //                          GenerateAPICallConfirmation.Content = await RestService.GeneratePutRequestRaw(workerConfigurationModel,
       //                              workerConfigurationModel.RawModel.Text);
       //                          GenerateAPICall_Click(confirmed);
       //                          break;
       //                      case "form-data":
       //                          GenerateAPICallConfirmation.Content = await RestService.GeneratePutRequestFormdata(workerConfigurationModel,
       //                              workerConfigurationModel.FormDataModel);
       //                          GenerateAPICall_Click(confirmed);
       //                          break;
       //                  }
       //                  
       //                  break;
       //              case "patch":
       //                  switch (workerConfigurationModel.bodyType)
       //                  {
       //                      case "raw":
       //                          GenerateAPICallConfirmation.Content = await RestService.GeneratePatchRequestRaw(workerConfigurationModel,
       //                              workerConfigurationModel.RawModel.Text);
       //                          GenerateAPICall_Click(confirmed);
       //                          break;
       //                      case "form-data":
       //                          GenerateAPICallConfirmation.Content = await RestService.GeneratePatchRequestFormdata(
       //                              workerConfigurationModel,
       //                              workerConfigurationModel.FormDataModel);
       //                          GenerateAPICall_Click(confirmed);
       //                          break;
       //                  }
       //                  
       //                  break;
       //              case "delete":
       //                  GenerateAPICallConfirmation.Content = await RestService.GenerateDeleteRequest(workerConfigurationModel);
       //                  GenerateAPICall_Click(confirmed);
       //                  break; 
       //          }
       //  return "";
    }
    private void GenerateAPICall_Click(bool confirmed)
    {
        if (confirmed)
        {
            GenerateAPICallConfirmation.Show();
        }
        
    }


    private void NavigateToEdit(int workerConfigID)
    {
        NavigationManager.NavigateTo($"EditWorkerConfig/{workerConfigID}");
    }

}