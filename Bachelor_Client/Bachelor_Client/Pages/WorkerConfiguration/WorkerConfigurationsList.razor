@page "/WorkerConfigurationsList"
@using Bachelor_Client.Pages.WorkerConfiguration.DeleteWorkerConfig
@using Bachelor_Client.Pages.WorkerConfiguration.SendRequest
@using Bachelor_Client.Services.Rest
@using Bachelor_Client.Services.WorkerConfig
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Rendering
@using Bachelor_Client.Models
@using Bachelor_Client.Authentication
@inject NavigationManager NavigationManager
@inject IRestService RestService
@inject IWorkerConfigService WorkerConfigService
@inject AuthenticationStateProvider AuthenticationStateProvider
@layout WorkerConfigurationsLayout
<CascadingAuthenticationState>
    <AuthorizeView Policy="loggedAccount">
        <Authorized>

            <div class="worker-configlist py-4">


                <div class="container">
                    <div class="row">
                        <input class="form-control" type="text" 
                               @bind-value="SearchText"
                               @bind-value:event="oninput" placeholder="Search..." style="width: 15%; height: 5%; background-color: transparent; border: none; margin-left: 82%"/>
                    </div>
                    <div class="row">
                        <div class="col-lg-12">
                            <div style="color: black">
                                <div class="card-header bg-transparent text-center">

                                </div>
                                <div class="card-body">


                                    @if (WorkerConfigList.Count == 0)
                                    {
                                        <div class="spinner"></div>

                                        <p>
                                            <em>@errorMessage</em>
                                        </p>
                                    }
                                    else
                                    {
                                        <table class='table' style=" color: black">
                                            <thead>
                                            <tr>
                                                <th class="url" style="width: 35%">Worker Configuration</th>
                                                <th class="requestType" style="width: 15%">Request Type</th>
                                                <th class="authType" style="width: 15%">Authorization Type</th>
                                                <th class="bodyType" style="width: 15%">Body Type</th>
                                                <th class="actions" style="width: 30%">Actions</th>
                                            </tr>
                                            </thead>
                                            <tbody>

                                            @foreach (var workerConfig in Filtered)
                                            {
                                                <tr>
                                                    <td>@workerConfig.Url</td>
                                                    <td>@workerConfig.RequestType</td>
                                                    <td>@workerConfig.LastSavedAuth</td>
                                                    <td>@workerConfig.LastSavedBody</td>

                                                    <td>
                                                        <button class="btn" @onclick="() => NavigateToEdit(workerConfig.PkWorkerConfigurationId)"><i class="fa fa-edit"></i> </button>
                                                        <button class="btn" @onclick="DeleteWorkerConfig_Click"><i class="fa fa-trash"></i> </button>
                                                        <button class="btn" @onclick="() => GenerateAPICall(workerConfig, true)">Send</button>
                                                    </td>
                                                </tr>
                                                
                                                <DeleteWorkerConfig @ref="DeleteWorkerConfigConfirmation" ConfirmationChanged="DeleteWorkerConfig"
                                                                    ConfirmationMessage=@($"Are you sure you want to delete \"{workerConfig.Url}\"")  ID = "@workerConfig.PkWorkerConfigurationId">
                                                </DeleteWorkerConfig>
                                            }
                                            </tbody>
                                        </table>
                                    }
                                </div>
                            </div>
                        </div>

                    </div>
                </div>
            </div>
        </Authorized>
          <NotAuthorized>
                    <body>
                    <header class="bgimg-1" id="home">
                        <div class="w3-display-left w3-text-white" style="padding-left: 5%">
                            <span class="w3-jumbo w3-hide-small">Log in to see the content</span><br>
                            <span class="w3-xxlarge w3-hide-large w3-hide-medium">Log in to see the content</span><br>
                        </div>
                    </header>
                    </body>
                </NotAuthorized>
    </AuthorizeView>
    <SendRequestConfirm @ref="GenerateAPICallConfirmation" ConfirmationChanged="GenerateAPICall_Click" />
</CascadingAuthenticationState>
@code {
    public List<WorkerConfiguration> WorkerConfigList = new();
    private SendRequestBase GenerateAPICallConfirmation { get; set; }
    private DeleteWorkerConfigBase DeleteWorkerConfigConfirmation { get; set; }
    private string errorMessage = "";
    public string SearchText = "";
    

    protected override async Task OnInitializedAsync()
    {
        // if(((AccountCustomAuthenticationStateProvider) AuthenticationStateProvider).cachedAccount != null)
        // {
             WorkerConfigList = await WorkerConfigService.ReadAllWorkerConfigurations();
        // }
       
    }
    
    List<WorkerConfiguration> Filtered => WorkerConfigList.Where(
        w => w.Url.ToLower().Contains(SearchText.ToLower())).ToList();

    private async Task DeleteWorkerConfig(bool confirmed)
    {
        if (confirmed)
        {
            await WorkerConfigService.DeleteWorkerConfiguration(DeleteWorkerConfigConfirmation.ID);
            NavigationManager.NavigateTo("/WorkerConfigurationsList", true);
        }
    }
    private void DeleteWorkerConfig_Click()
    {
        DeleteWorkerConfigConfirmation.Show();
    }
    
    private async Task GenerateAPICall(WorkerConfiguration workerConfigurationModel, bool confirmed)
    {
        
        GenerateAPICallConfirmation.Content =
            await RestService.GenerateRequest(workerConfigurationModel, workerConfigurationModel.RequestType + workerConfigurationModel.LastSavedBody);
        GenerateAPICall_Click(confirmed);
    // switch (workerConfigurationModel.requestType)
       //          {
       //              case "get":
       //                  GenerateAPICallConfirmation.Content = await RestService.GenerateGetRequest(workerConfigurationModel);
       //                  GenerateAPICall_Click(confirmed);
       //                  break;
       //              case "post":
       //                  switch (workerConfigurationModel.bodyType)
       //                  {
       //                      case "raw":
       //                          GenerateAPICallConfirmation.Content = await RestService.GeneratePostRequestRaw(workerConfigurationModel,
       //                              workerConfigurationModel.RawModel.Text);
       //                          GenerateAPICall_Click(confirmed);
       //                          break;
       //                      case "form-data":
       //                          GenerateAPICallConfirmation.Content = await RestService.GeneratePostRequestFormData(workerConfigurationModel,
       //                              workerConfigurationModel.FormDataModel);
       //                          GenerateAPICall_Click(confirmed);
       //                          break;
       //                  }
       //                 
       //                  break;
       //              case "put":
       //                  switch (workerConfigurationModel.bodyType)
       //                  {
       //                      case "raw":
       //                          GenerateAPICallConfirmation.Content = await RestService.GeneratePutRequestRaw(workerConfigurationModel,
       //                              workerConfigurationModel.RawModel.Text);
       //                          GenerateAPICall_Click(confirmed);
       //                          break;
       //                      case "form-data":
       //                          GenerateAPICallConfirmation.Content = await RestService.GeneratePutRequestFormdata(workerConfigurationModel,
       //                              workerConfigurationModel.FormDataModel);
       //                          GenerateAPICall_Click(confirmed);
       //                          break;
       //                  }
       //                  
       //                  break;
       //              case "patch":
       //                  switch (workerConfigurationModel.bodyType)
       //                  {
       //                      case "raw":
       //                          GenerateAPICallConfirmation.Content = await RestService.GeneratePatchRequestRaw(workerConfigurationModel,
       //                              workerConfigurationModel.RawModel.Text);
       //                          GenerateAPICall_Click(confirmed);
       //                          break;
       //                      case "form-data":
       //                          GenerateAPICallConfirmation.Content = await RestService.GeneratePatchRequestFormdata(
       //                              workerConfigurationModel,
       //                              workerConfigurationModel.FormDataModel);
       //                          GenerateAPICall_Click(confirmed);
       //                          break;
       //                  }
       //                  
       //                  break;
       //              case "delete":
       //                  GenerateAPICallConfirmation.Content = await RestService.GenerateDeleteRequest(workerConfigurationModel);
       //                  GenerateAPICall_Click(confirmed);
       //                  break; 
       //          }
       //  return "";
    }
    private void GenerateAPICall_Click(bool confirmed)
    {
        if (confirmed)
        {
            GenerateAPICallConfirmation.Show();
        }
        
    }


    private void NavigateToEdit(int workerConfigID)
    {
        NavigationManager.NavigateTo($"EditWorkerConfig/{workerConfigID}");
    }

}