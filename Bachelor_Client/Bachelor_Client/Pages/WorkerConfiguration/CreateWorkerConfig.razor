@page "/CreateWorkerConfig"
@layout WorkerConfigurationsLayout
@using Bunit.Extensions
@using Bachelor_Client.Services.WorkerConfig
@using Microsoft.AspNetCore.Components.Authorization
@using Bachelor_Client.Models
@inject IWorkerConfigService _WorkerService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
<CascadingAuthenticationState>
<AuthorizeView >
  <NotAuthorized>
                  <body>
                       <header class="bgimg-1" id="home">
                         <div class="w3-display-left w3-text-white" style="padding-left: 5%">
                           <span class="w3-jumbo w3-hide-small">Log in to see the content</span><br>
                           <span class="w3-xxlarge w3-hide-large w3-hide-medium">Log in to see the content</span><br>
                         </div>
                       </header>
                       </body>
              </NotAuthorized>
<Authorized>
<h1 style="color: black;   font-weight: bold; ">

</h1>

<main>

<input id="tabParam" type="radio" name="tabs" checked>
<label for="tabParam">Parameters</label>

<input id="tabAuth" type="radio" name="tabs">
<label for="tabAuth">Authorization</label>

<input id="tabHeader" type="radio" name="tabs">
<label for="tabHeader">Headers</label>

<input id="tabBody" type="radio" name="tabs">
<label for="tabBody">Body</label>

<section id="content1">
    <div class="containerCreate">
        <div class="row">

            <div class="col-sm">
                <select id="requestType" name="requestType" style="width: 100px; height: 50px" @bind="requestType">
                    <option value="get">GET</option>
                    <option value="post">POST</option>
                    <option value="put">PUT</option>
                    <option value="delete">DELETE</option>
                </select>
            </div>
            <div class="col-sm">
                <input id="url" class="form-control" type="text" placeholder="Enter request URL" style="width: 450px; height: 50px" @bind="url"/>
                <div class="errorLabel">@errorMessage</div>
            </div>
            <div class="col-sm">
                <button class="button-5" style="width: 50px; height: 50px" @onclick="CreateWorker">Store</button>
            </div>
        </div>
        <div class="row"> </div>
        <div class="row">
            <div class="col-sm">
                <p>Query Parameters</p>
            </div>
        </div>
        <div class="row">
            <div class="col-sm">
                <table style="width:100%">
                    <tr>
                        <th>KEY</th>
                        <th>VALUE</th>
                        <th>DESCRIPTION</th>
                    </tr>
                    @foreach (var model in parameters)
                    {
                        <tr>
                            <td>@model.Key</td>
                            <td>@model.Value</td>
                            <td>@model.Description</td>
                            <td>
                                <button style="border: none;" @onclick="() => parameters.Remove(model)">
                                    X
                                </button>
                            </td>
                        </tr>
                    }

                </table>
                <div class="row"> </div>
                <a class="add" @onclick="@(() => parameters.Add(new Parameter() { Key = keyTextFieldParameter, Value = valueTextFieldParameter, Description = descTextFieldParameter }))"><i class="fa fa-plus"></i> Add</a>

                <div class="row">
                    <div class="col-sm">
                        <input class="form-control" type="text" placeholder="Key" style="width: 200px; height: 30px" @bind="@keyTextFieldParameter" @oninput="(e) => { keyTextFieldParameter = e.Value == null ? string.Empty : (string)e.Value; }"/>
                    </div>
                    <div class="col-sm">
                        <input class="form-control" type="text" placeholder="Value" style="width: 200px; height: 30px" @bind="@valueTextFieldParameter" @oninput="(e) => { valueTextFieldParameter = e.Value == null ? string.Empty : (string)e.Value; }"/>
                    </div>
                    <div class="col-sm">
                        <input class="form-control" type="text" placeholder="Description" style="width: 200px; height: 30px" @bind="@descTextFieldParameter" @oninput="(e) => { descTextFieldParameter = e.Value == null ? string.Empty : (string)e.Value; }"/>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

<section id="content2">
<div class="containerCreate">
<div class="row">

    <div class="col-sm">
        <select id="requestType" name="requestType" style="width: 100px; height: 50px" @bind="requestType">
            <option value="get">GET</option>
            <option value="post">POST</option>
            <option value="put">PUT</option>
            <option value="delete">DELETE</option>
        </select>
    </div>
    <div class="col-sm">
        <input id="url" class="form-control" type="text" placeholder="Enter request URL" style="width: 450px; height: 50px" @bind="url"/>
        <div class="errorLabel">@errorMessage</div>
    </div>
    <div class="col-sm">
        <button class="button-5" style="width: 50px; height: 50px" @onclick="CreateWorker">Store</button>
    </div>
</div>
<div class="row"> </div>
<div class="row">
    <div class="col-sm">
        <p>Authorization</p>
    </div>
</div>
<div class="row">
    <div class="col-sm">
        <p>Type:</p>
    </div>
    <div class="col-sm">
        <select id="authType" name="authType" style="width: 100px;height: 40px; font-size: 12px;" @bind="authorizationType">
            <option value="noAuth">No Auth</option>
            <option value="APIKey">API Key</option>
            <option value="BearerToken">Bearer Token</option>
            <option value="BasicAuth">Basic Auth</option>
            <option value="OAuth1.0">OAuth 1.0</option>
            <option value="OAuth2.0">OAuth 2.0</option>
        </select>
    </div>
    <div class="col-sm"></div>
    <div class="col-sm"></div>
    <div class="col-sm"></div>
    <div class="col-sm"></div>
</div>
@if (authorizationType == "noAuth")
{
    <div class="row">
        <div class="col-sm">
            <p>This request does not use any authorization. </p>
        </div>
    </div>
}
@if (authorizationType == "APIKey")
{
    <div class="row">
        <div class="col-sm">
            <p>Key:</p>
        </div>
        <div class="col-sm">
            <input class="form-control" type="text" placeholder="Key" style="width: 200px; height: 30px" @bind="APIKey_KEY"/>
        </div>
    </div>
    <div class="row">
        <div class="col-sm">
            <p>Value:</p>
        </div>
        <div class="col-sm">
            <input class="form-control" type="text" placeholder="Value" style="width: 200px; height: 30px" @bind="APIKey_Value"/>
        </div>
    </div>

    <div class="row">
        <div class="col-sm">
            Add to:
        </div>
        <div class="col-sm">
            <select id="addTo" name="addTo" style="width: 200px; height: 40px; font-size: 12px;" @bind="APIKEY_AddTo">
                <option value="Header">Header</option>
                <option value="QueryParameters">Query Parameters</option>
            </select>
        </div>
    </div>
}
@if (authorizationType == "BearerToken")
{
    <div class="row">
        <div class="col-sm">
            <p>Token:</p>
        </div>
        <div class="col-sm">
            <input class="form-control" type="text" placeholder="Token" style="width: 200px; height: 30px" @bind="BearerToken_Token"/>
        </div>
    </div>
}
@if (authorizationType == "BasicAuth")
{
    <div class="row">
        <div class="col-sm">
            <p>Username:</p>
        </div>
        <div class="col-sm">
            <input class="form-control" type="text" placeholder="Username" style="width: 200px; height: 30px" @bind="BasicAuth_Username"/>
        </div>
    </div>
    <div class="row">
        <div class="col-sm">
            <p>Password:</p>
        </div>
        <div class="col-sm">
            <input class="form-control" type="text" placeholder="Password" style="width: 200px; height: 30px" @bind="BasicAuth_Password"/>
        </div>
    </div>
}
@if (authorizationType == "OAuth2.0")
{
    <div class="row">
        <div class="col-sm">
            <p>Access Token:</p>
        </div>
        <div class="col-sm">
            <input class="form-control" type="text" placeholder="Access Token" style="width: 200px; height: 30px" @bind="OAuth2_AccessToken"/>
        </div>
    </div>
    <div class="row">
        <div class="col-sm">
            <p>Header Prefix:</p>
        </div>
        <div class="col-sm">
            <input class="form-control" type="text" placeholder="Header Prefix" style="width: 200px; height: 30px" @bind="OAuth2_HeaderPrefix"/>
        </div>
    </div>
}
</div>

</section>

<section id="content3">
    <div class="containerCreate">
        <div class="row">

            <div class="col-sm">
                <select id="requestType" name="requestType" style="width: 100px; height: 50px" @bind="requestType">
                    <option value="get">GET</option>
                    <option value="post">POST</option>
                    <option value="put">PUT</option>
                    <option value="delete">DELETE</option>
                </select>
            </div>
            <div class="col-sm">
                <input id="url" class="form-control" type="text" placeholder="Enter request URL" style="width: 450px; height: 50px" @bind="url"/>
                <div class="errorLabel">@errorMessage</div>
            </div>
            <div class="col-sm">
                <button class="button-5" style="width: 50px; height: 50px" @onclick="CreateWorker">Store</button>
            </div>
        </div>
        <div class="row"> </div>
        <div class="row">
            <div class="col-sm">
                <p>Headers</p>
            </div>
        </div>
        <div class="row">
            <div class="col-sm">
                <table style="width:100%">
                    <tr>
                        <th>KEY</th>
                        <th>VALUE</th>
                        <th>DESCRIPTION</th>
                    </tr>
                    @foreach (var model in headers)
                    {
                        <tr>
                            <td>@model.Key</td>
                            <td>@model.Value</td>
                            <td>@model.Description</td>
                            <td>
                                <button style="border: none;" @onclick="() => headers.Remove(model)">
                                    X
                                </button>
                            </td>
                        </tr>
                    }

                </table>
                <div class="row"> </div>
                <a class="add" @onclick="@(() => headers.Add(new Header() { Key = keyTextFieldHeader, Value = valueTextFieldHeader, Description = descTextFieldHeader }))"><i class="fa fa-plus"></i> Add</a>

                <div class="row">
                    <div class="col-sm">
                        <input class="form-control" type="text" placeholder="Key" style="width: 200px; height: 30px" @bind="@keyTextFieldHeader" @oninput="(e) => { keyTextFieldHeader = e.Value == null ? string.Empty : (string)e.Value; }"/>
                    </div>
                    <div class="col-sm">
                        <input class="form-control" type="text" placeholder="Value" style="width: 200px; height: 30px" @bind="@valueTextFieldHeader" @oninput="(e) => { valueTextFieldHeader = e.Value == null ? string.Empty : (string)e.Value; }"/>
                    </div>
                    <div class="col-sm">
                        <input class="form-control" type="text" placeholder="Description" style="width: 200px; height: 30px" @bind="@descTextFieldHeader" @oninput="(e) => { descTextFieldHeader = e.Value == null ? string.Empty : (string)e.Value; }"/>
                    </div>
                </div>


            </div>
        </div>
    </div>
</section>

<section id="content4">
    <div class="containerCreate">
        <div class="row">

            <div class="col-sm">
                <select id="requestType" name="requestType" style="width: 100px; height: 50px" @bind="requestType">
                    <option value="get">GET</option>
                    <option value="post">POST</option>
                    <option value="put">PUT</option>
                    <option value="delete">DELETE</option>
                </select>
            </div>
            <div class="col-sm">
                <input id="url" class="form-control" type="text" placeholder="Enter request URL" style="width: 450px; height: 50px" @bind="url"/>
                <div class="errorLabel">@errorMessage</div>
            </div>
            <div class="col-sm">
                <button class="button-5" style="width: 50px; height: 50px" @onclick="CreateWorker">Store</button>
            </div>
        </div>
        <div class="row"> </div>
        <div class="row">
            <div class="col-sm">
                <p>Body</p>
            </div>
        </div>
        <div class="row">
            <div class="col-sm">
                <p>Type:</p>
            </div>
            <div class="col-sm">
                <select id="bodyType" name="bodyType" style="width: 100px; height: 40px; font-size: 12px;" @bind="bodyType">
                    <option value="none">none</option>
                    <option value="form-data">form-data</option>
                    <option value="raw">raw</option>
                </select>
            </div>
            <div class="col-sm"></div>
            <div class="col-sm"></div>
            <div class="col-sm"></div>
            <div class="col-sm"></div>
        </div>

        @if (bodyType == "none")
        {
            <div class="row">
                <div class="col-sm">
                    <p>This request does not have a body. </p>
                </div>
            </div>
        }
        @if (bodyType == "form-data")
        {
            <div class="row">
                <div class="col-sm">
                    <table style="width:100%">
                        <tr>
                            <th>KEY</th>
                            <th>VALUE</th>
                            <th>DESCRIPTION</th>
                        </tr>
                        @foreach (var model in bodies)
                        {
                            <tr>
                                <td>@model.Key</td>
                                <td>@model.Value</td>
                                <td>@model.Description</td>
                                <td>
                                    <button style="border: none;" @onclick="() => bodies.Remove(model)">
                                        X
                                    </button>
                                </td>
                            </tr>
                        }

                    </table>
                    <div class="row"> </div>
                    <a class="add" @onclick="@(() => bodies.Add(new FormDatum() { Key = keyTextFieldBody, Value = valueTextFieldBody, Description = descTextFieldBody }))"><i class="fa fa-plus"></i> Add</a>

                    <div class="row">
                        <div class="col-sm">
                            <input class="form-control" type="text" placeholder="Key" style="width: 200px; height: 30px" @bind="@keyTextFieldBody" @oninput="(e) => { keyTextFieldBody = e.Value == null ? string.Empty : (string)e.Value; }"/>
                        </div>
                        <div class="col-sm">
                            <input class="form-control" type="text" placeholder="Value" style="width: 200px; height: 30px" @bind="@valueTextFieldBody" @oninput="(e) => { valueTextFieldBody = e.Value == null ? string.Empty : (string)e.Value; }"/>
                        </div>
                        <div class="col-sm">
                            <input class="form-control" type="text" placeholder="Description" style="width: 200px; height: 30px" @bind="@descTextFieldBody" @oninput="(e) => { descTextFieldBody = e.Value == null ? string.Empty : (string)e.Value; }"/>
                        </div>
                    </div>
                </div>
            </div>
        }
        @if (bodyType == "raw")
        {
            <div class="row">
                <div class="col-sm">
                    <textarea  id="raw" name="raw" rows="4" cols="50" @bind="Body_Raw">
                     </textarea>
                </div>
            </div>
        }
    </div>
</section>

</main>
</Authorized>
</AuthorizeView>
    </CascadingAuthenticationState>
@code {

    #region bindings
    string requestType = "get";
    string authorizationType = "noAuth";
    string bodyType = "none";
    string APIKEY_AddTo = "Header";
    string descTextFieldHeader = "";
    string keyTextFieldHeader = "";
    string valueTextFieldHeader = "";
    string descTextFieldParameter = "";
    string keyTextFieldParameter = "";
    string valueTextFieldParameter = "";
    string keyTextFieldBody = "";
    string valueTextFieldBody = "";
    string descTextFieldBody = "";
    string url { get; set; }
    string Body_Raw { get; set; }
    string OAuth2_HeaderPrefix { get; set; }
    string OAuth2_AccessToken { get; set; }
    string BasicAuth_Password { get; set; }
    string BasicAuth_Username { get; set; }
    string BearerToken_Token { get; set; }
    string APIKey_KEY { get; set; }
    string APIKey_Value { get; set; }
    private string errorMessage { get; set; }
    List<Parameter> parameters = new();
    List<Header> headers = new();
    List<FormDatum> bodies = new();
    #endregion

    private async Task CreateWorker()
    {
        try
        {
            if (!url.IsNullOrEmpty())
            {
                await _WorkerService.CreateWorkerConfiguration(InitData());
                NavigationManager.NavigateTo("WorkerConfigurationsList");
    #region empty fields after pressing the button

                errorMessage = "";
                url = "";
                Body_Raw = "";
                OAuth2_HeaderPrefix = "";
                OAuth2_AccessToken = "";
                BasicAuth_Password = "";
                BasicAuth_Username = "";
                BearerToken_Token = "";
                APIKEY_AddTo = "";
                APIKey_KEY = "";
                APIKey_Value = "";
                descTextFieldHeader = "";
                keyTextFieldHeader = "";
                valueTextFieldHeader = "";
                descTextFieldParameter = "";
                keyTextFieldParameter = "";
                valueTextFieldParameter = "";
                keyTextFieldBody = "";
                valueTextFieldBody = "";
                descTextFieldBody = "";

    #endregion
            }
            else
            {
                throw new Exception("Please, specify the URL");
            }
           
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            errorMessage = e.Message;
        }
       
    }

    private WorkerConfiguration InitData()
    {
        return new WorkerConfiguration()
        {
            Url = url,
            FkRaw = new Raw
            {
                Text = Body_Raw
            },
            FormData = bodies,
            LastSavedAuth = authorizationType,
            LastSavedBody = bodyType,
            RequestType = requestType,
            FkApikey = new Apikey
            {
                AddTo = APIKEY_AddTo,
                Key = APIKey_KEY,
                Value = APIKey_Value
            },
            FkBasicAuth = new BasicAuth
            {
                Password = BasicAuth_Password,
                Username = BasicAuth_Username
            },
            FkBearerToken = new BearerToken
            {
                Token = BearerToken_Token
            },
            FkOauth20 = new Oauth20
            {
                AccessToken = OAuth2_AccessToken,
                HeaderPrefix = OAuth2_HeaderPrefix
            },
            Parameters = parameters,
            Headers = headers
        };
    }
    
}