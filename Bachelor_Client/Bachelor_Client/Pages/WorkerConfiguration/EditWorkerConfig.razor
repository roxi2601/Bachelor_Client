@page "/EditWorkerConfig/{workerConfigID}"
@using Microsoft.AspNetCore.Components
@using Bachelor_Client.Models.WorkerConfiguration
@using Bachelor_Client.Models.Body
@using Bachelor_Client.Services.WorkerConfig
@using Microsoft.AspNetCore.Components.Authorization
@inject IWorkerConfigService _WorkerService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
<CascadingAuthenticationState>
  <AuthorizeView Policy="loggedAccount">
    <Authorized>
<h1 style="color: black;   font-weight: bold; ">

</h1>

<main>

@*
<input id="tabParam" type="radio" name="tabs" checked>
<label for="tabParam">Parameters</label>

<input id="tabAuth" type="radio" name="tabs">
<label for="tabAuth">Authorization</label>

<input id="tabHeader" type="radio" name="tabs">
<label for="tabHeader">Headers</label>

<input id="tabBody" type="radio" name="tabs">
<label for="tabBody">Body</label>
*@

<div class="containerEdit">
    <h3 style="color: black;   font-weight: bold; ">
                Edit worker configuration for @_workerConfigurationModel.url
            </h3>
            
            <div class="row">
    
                <div class="col-sm">
                    <select id="requestType" name="requestType" style="width: 100px; height: 50px" @bind="_workerConfigurationModel.requestType">
                        <option value="get">GET</option>
                        <option value="post">POST</option>
                        <option value="put">PUT</option>
                        <option value="delete">DELETE</option>
                    </select>
                </div>
                <div class="col-sm">
                    <input id="url" class="form-control" type="text" placeholder="Enter request URL" style="width: 450px; height: 50px" @bind="_workerConfigurationModel.url"/>
                    <div style="color:red">@errorMessage</div>
                </div>
                <div class="col-sm">
                    <button class="button-5" style="width: 50px; height: 50px" @onclick="EditWorkerConfiguration">Store</button>
                </div>
            </div>
</div>
        
<div class="row"> </div>
<div class="containerEdit">
    <div class="row">
                <div class="col-sm">
                    <h5 style="font-weight: bold">Query Parameters</h5>
                </div>
            </div>
            <div class="row">
                <div class="col-sm">
                    <table style="width:100%">
                        <tr>
                            <th>KEY</th>
                            <th>VALUE</th>
                            <th>DESCRIPTION</th>
                        </tr>
                        @foreach (var model in _workerConfigurationModel.parameters)
                        {
                            <tr>
                                <td>@model.Key</td>
                                <td>@model.Value</td>
                                <td>@model.Description</td>
                                <td>
                                    <button style="border: none;" @onclick="() => _workerConfigurationModel.parameters.Remove(model)">
                                        X
                                    </button>
                                </td>
                            </tr>
                        }
    
                    </table>
                    <div class="row"> </div>
                    <a class="add" @onclick="@(() => _workerConfigurationModel.parameters.Add(new ParametersHeaderModel() { Key = keyTextFieldParameter, Value = valueTextFieldParameter, Description = descTextFieldParameter }))"><i class="fa fa-plus"></i> Add</a>
                                        
                    
                    <div class="row">
                        <div class="col-sm">
                            <input class="form-control" type="text" placeholder="Key" style="width: 200px; height: 30px" @bind="@keyTextFieldParameter" @oninput="(e) => { keyTextFieldParameter = e.Value == null ? string.Empty : (string)e.Value; }"/>
                        </div>
                        <div class="col-sm">
                            <input class="form-control" type="text" placeholder="Value" style="width: 200px; height: 30px" @bind="@valueTextFieldParameter" @oninput="(e) => { valueTextFieldParameter = e.Value == null ? string.Empty : (string)e.Value; }"/>
                        </div>
                        <div class="col-sm">
                            <input class="form-control" type="text" placeholder="Description" style="width: 200px; height: 30px" @bind="@descTextFieldParameter" @oninput="(e) => { descTextFieldParameter = e.Value == null ? string.Empty : (string)e.Value; }"/>
                        </div>
                    </div>
                </div>
            </div>

</div>
        

<div class="row"> </div>
<div class="containerEdit">
    <div class="row">
        <div class="col-sm">
            <h5 style="font-weight: bold">Authorization</h5>
        </div>
    </div>
    <div class="row">
        <div class="col-sm">
            <p>Type:</p>
        </div>
        <div class="col-sm">
            <select id="authType" name="authType" style="width: 100px;height: 40px; font-size: 12px;" @bind="_workerConfigurationModel.authorizationType">
                <option value="noAuth">No Auth</option>
                <option value="APIKey">API Key</option>
                <option value="BearerToken">Bearer Token</option>
                <option value="BasicAuth">Basic Auth</option>
                <option value="OAuth1.0">OAuth 1.0</option>
                <option value="OAuth2.0">OAuth 2.0</option>
            </select>
        </div>
        <div class="col-sm"></div>
        <div class="col-sm"></div>
        <div class="col-sm"></div>
        <div class="col-sm"></div>
    </div>
    @if (_workerConfigurationModel.authorizationType == "noAuth")
    {
        <div class="row">
            <div class="col-sm">
                <p>This request does not use any authorization. </p>
            </div>
        </div>
    }
    @if (_workerConfigurationModel.authorizationType == "APIKey")
    {
        <div class="row">
            <div class="col-sm">
                <p>Key:</p>
            </div>
            <div class="col-sm">
                <input class="form-control" type="text" placeholder="Key" style="width: 200px; height: 30px" @bind="_workerConfigurationModel.ApiKeyModel.Key"/>
            </div>
        </div>
        <div class="row">
            <div class="col-sm">
                <p>Value:</p>
            </div>
            <div class="col-sm">
                <input class="form-control" type="text" placeholder="Value" style="width: 200px; height: 30px" @bind="_workerConfigurationModel.ApiKeyModel.Value"/>
            </div>
        </div>
    
        <div class="row">
            <div class="col-sm">
                Add to:
            </div>
            <div class="col-sm">
                <select id="addTo" name="addTo" style="width: 200px; height: 40px; font-size: 12px;" @bind="_workerConfigurationModel.ApiKeyModel.AddTo">
                    <option value="Header">Header</option>
                    <option value="QueryParameters">Query Parameters</option>
                </select>
            </div>
        </div>
    }
    @if (_workerConfigurationModel.authorizationType == "BearerToken")
    {
        <div class="row">
            <div class="col-sm">
                <p>Token:</p>
            </div>
            <div class="col-sm">
                <input class="form-control" type="text" placeholder="Token" style="width: 200px; height: 30px" @bind="_workerConfigurationModel.BearerTokenModel.Token"/>
            </div>
        </div>
    }
    @if (_workerConfigurationModel.authorizationType == "BasicAuth")
    {
        <div class="row">
            <div class="col-sm">
                <p>Username:</p>
            </div>
            <div class="col-sm">
                <input class="form-control" type="text" placeholder="Username" style="width: 200px; height: 30px" @bind="_workerConfigurationModel.BasicAuthModel.Username"/>
            </div>
        </div>
        <div class="row">
            <div class="col-sm">
                <p>Password:</p>
            </div>
            <div class="col-sm">
                <input class="form-control" type="text" placeholder="Password" style="width: 200px; height: 30px" @bind="_workerConfigurationModel.BasicAuthModel.Password"/>
            </div>
        </div>
    }
    @if (_workerConfigurationModel.authorizationType == "OAuth1.0")
    {
        <div class="row">
            <div class="col-sm">
                Signature method:
            </div>
            <div class="col-sm">
                <select id="signatureMethod" name="signatureMethod" style="width: 200px; height: 40px; font-size: 12px;" >
                    <option value="1">HMAC-SHA1</option>
                    <option value="2">HMAC-SHA256</option>
                    <option value="3">HMAC-SHA512</option>
                    <option value="4">RSA-SHA1</option>
                    <option value="5">RSA-SHA256</option>
                    <option value="6">RSA-SHA512</option>
                    <option value="7">PLAINTEXT</option>
                </select>
            </div>
        </div>
        <div class="row">
            <div class="col-sm">
                <p>Consumer Key:</p>
            </div>
            <div class="col-sm">
                <input class="form-control" type="text" placeholder="Consumer Key" style="width: 200px; height: 30px" />
            </div>
        </div>
        <div class="row">
            <div class="col-sm">
                <p>Consumer Secret:</p>
            </div>
            <div class="col-sm">
                <input class="form-control" type="text" placeholder="Consumer Secret" style="width: 200px; height: 30px" />
            </div>
        </div>
        <div class="row">
            <div class="col-sm">
                <p>Access Token:</p>
            </div>
            <div class="col-sm">
                <input class="form-control" type="text" placeholder="Access Token" style="width: 200px; height: 30px" />
            </div>
        </div>
        <div class="row">
            <div class="col-sm">
                <p>Token Secret:</p>
            </div>
            <div class="col-sm">
                <input class="form-control" type="text" placeholder="Token Secret" style="width: 200px; height: 30px" />
            </div>
        </div>
        <div class="row">
            <p style="font-weight: bold">ADVANCED:</p>
        </div>
        <div class="row">
            <div class="col-sm">
                <p>Callback URL:</p>
            </div>
            <div class="col-sm">
                <input class="form-control" type="text" placeholder="Callback URL" style="width: 200px; height: 30px"/>
            </div>
        </div>
        <div class="row">
            <div class="col-sm">
                <p>Timestamp:</p>
            </div>
            <div class="col-sm">
                <input class="form-control" type="text" placeholder="Timestamp" style="width: 200px; height: 30px"/>
            </div>
        </div>
        <div class="row">
            <div class="col-sm">
                <p>Nonce:</p>
            </div>
            <div class="col-sm">
                <input class="form-control" type="text" placeholder="Nonce" style="width: 200px; height: 30px" />
            </div>
        </div>
        <div class="row">
            <div class="col-sm">
                <p>Version:</p>
            </div>
            <div class="col-sm">
                <input class="form-control" type="text" placeholder="1" style="width: 200px; height: 30px" />
            </div>
        </div>
        <div class="row">
            <div class="col-sm">
                <p>Realm:</p>
            </div>
            <div class="col-sm">
                <input class="form-control" type="text" placeholder="Realm" style="width: 200px; height: 30px" />
            </div>
        </div>
        <div class="row">
            <div class="col-sm">
                <p>Include body hash:</p>
            </div>
            <div class="col-sm">
                <select id="bodyHash" name="bodyHash" style="width: 200px;height: 40px; font-size: 12px;" >
                    <option value="yes2">YES</option>
                    <option value="no2">NO</option>
                </select>
            </div>
        </div>
        <div class="row">
            <div class="col-sm">
                <p>Add empty parameters to signature:</p>
            </div>
            <div class="col-sm">
                <select id="paramSig" name="paramSig" style="width: 200px;height: 40px; font-size: 12px;" @bind="_workerConfigurationModel.OAuth1Model.EmptyParamToSig">
                    <option value="yes1">YES</option>
                    <option value="no1">NO</option>
                </select>
            </div>
        </div>
    }
    @if (_workerConfigurationModel.authorizationType == "OAuth2.0")
    {
        <div class="row">
            <div class="col-sm">
                <p>Access Token:</p>
            </div>
            <div class="col-sm">
                <input class="form-control" type="text" placeholder="Access Token" style="width: 200px; height: 30px" @bind="_workerConfigurationModel.OAuth2Model.AccessToken"/>
            </div>
        </div>
        <div class="row">
            <div class="col-sm">
                <p>Header Prefix:</p>
            </div>
            <div class="col-sm">
                <input class="form-control" type="text" placeholder="Header Prefix" style="width: 200px; height: 30px" @bind="_workerConfigurationModel.OAuth2Model.HeaderPrefix"/>
            </div>
        </div>
    }
</div>

<div class="row"> </div>
<div class="containerEdit">
     <div class="row">
                <div class="col-sm">
                    <h5 style="font-weight: bold">Headers</h5>
                </div>
            </div>
            <div class="row">
                <div class="col-sm">
                    <table style="width:100%">
                        <tr>
                            <th>KEY</th>
                            <th>VALUE</th>
                            <th>DESCRIPTION</th>
                        </tr>
                        @foreach (var model in _workerConfigurationModel.headers)
                        {
                            <tr>
                                <td>@model.Key</td>
                                <td>@model.Value</td>
                                <td>@model.Description</td>
                                <td>
                                    <button style="border: none" @onclick="() => _workerConfigurationModel.headers.Remove(model)">
                                        X
                                    </button>
                                </td>
                            </tr>
                        }
    
                    </table>
                    <div class="row"> </div>
                    <a class="add"  @onclick="@(() => _workerConfigurationModel.headers.Add(new ParametersHeaderModel() { Key = keyTextFieldHeader, Value = valueTextFieldHeader, Description = descTextFieldHeader }))"><i class="fa fa-plus"></i> Add</a>
                    
                    <div class="row">
                        <div class="col-sm">
                            <input class="form-control" type="text" placeholder="Key" style="width: 200px; height: 30px" @bind="@keyTextFieldHeader" @oninput="(e) => { keyTextFieldHeader = e.Value == null ? string.Empty : (string)e.Value; }"/>
                        </div>
                        <div class="col-sm">
                            <input class="form-control" type="text" placeholder="Value" style="width: 200px; height: 30px" @bind="@valueTextFieldHeader" @oninput="(e) => { valueTextFieldHeader = e.Value == null ? string.Empty : (string)e.Value; }"/>
                        </div>
                        <div class="col-sm">
                            <input class="form-control" type="text" placeholder="Description" style="width: 200px; height: 30px" @bind="@descTextFieldHeader" @oninput="(e) => { descTextFieldHeader = e.Value == null ? string.Empty : (string)e.Value; }"/>
                        </div>
                    </div>
    
    
                </div>
            </div>
</div>
       


<div class="row"> </div>
<div class="containerEdit">
     <div class="row">
                <div class="col-sm">
                    <h5 style="font-weight: bold">Body</h5>
                </div>
            </div>
            <div class="row">
                <div class="col-sm">
                    <p>Type:</p>
                </div>
                <div class="col-sm">
                    <select id="bodyType" name="bodyType" style="width: 100px; height: 40px; font-size: 12px;" @bind="_workerConfigurationModel.bodyType">
                        <option value="none">none</option>
                        <option value="form-data">form-data</option>
                        <option value="raw">raw</option>
                    </select>
                </div>
                <div class="col-sm"></div>
                <div class="col-sm"></div>
                <div class="col-sm"></div>
                <div class="col-sm"></div>
            </div>
    
            @if (_workerConfigurationModel.bodyType == "none")
            {
                <div class="row">
                    <div class="col-sm">
                        <p>This request does not have a body. </p>
                    </div>
                </div>
            }
            @if (_workerConfigurationModel.bodyType == "form-data")
            {
                <div class="row">
                    <div class="col-sm">
                        <table style="width:100%">
                            <tr>
                                <th>KEY</th>
                                <th>VALUE</th>
                                <th>DESCRIPTION</th>
                            </tr>
                            @foreach (var model in bodies)
                            {
                                <tr>
                                    <td>@model.Key</td>
                                    <td>@model.Value</td>
                                    <td>@model.Description</td>
                                    <td>
                                        <button style="border: none" @onclick="() => bodies.Remove(model)">
                                            X
                                        </button>
                                    </td>
                                </tr>
                            }
    
                        </table>
                        <div class="row"> </div>
                        <a class="add" @onclick="@(() => bodies.Add(new FormDataModel() { Key = keyTextFieldBody, Value = valueTextFieldBody, Description = descTextFieldBody }))"><i class="fa fa-plus"></i> Add</a>
                        
                        <div class="row"></div>
                        <div class="row">
                            <div class="col-sm">
                                <input class="form-control" type="text" placeholder="Key" style="width: 200px; height: 30px" @bind="@keyTextFieldBody" @oninput="(e) => { keyTextFieldBody = e.Value == null ? string.Empty : (string)e.Value; }"/>
                            </div>
                            <div class="col-sm">
                                <input class="form-control" type="text" placeholder="Value" style="width: 200px; height: 30px" @bind="@valueTextFieldBody" @oninput="(e) => { valueTextFieldBody = e.Value == null ? string.Empty : (string)e.Value; }"/>
                            </div>
                            <div class="col-sm">
                                <input class="form-control" type="text" placeholder="Description" style="width: 200px; height: 30px" @bind="@descTextFieldBody" @oninput="(e) => { descTextFieldBody = e.Value == null ? string.Empty : (string)e.Value; }"/>
                            </div>
                        </div>
                    </div>
                </div>
            }
            @if (_workerConfigurationModel.bodyType == "raw")
            {
                <div class="row">
                    <div class="col-sm">
                        <textarea  id="raw" name="raw" rows="4" cols="50" @bind="_workerConfigurationModel.RawModel.Text">
                         </textarea>
                    </div>
                </div>
            }
</div>
       



</main>
</Authorized>
      </AuthorizeView>
    </CascadingAuthenticationState>
@code {

    [Parameter]
    public string workerConfigID { get; set; }
    List<ParametersHeaderModel> parameters = new();
    List<ParametersHeaderModel> headers = new();
    List<FormDataModel> bodies = new();
    private string errorMessage { get; set; }
    string descTextFieldHeader = "";
    string keyTextFieldHeader = "";
    string valueTextFieldHeader = "";
    string descTextFieldParameter = "";
    string keyTextFieldParameter = "";
    string valueTextFieldParameter = "";
    string keyTextFieldBody = "";
    string valueTextFieldBody = "";
    string descTextFieldBody = "";
    private WorkerConfigurationModel _workerConfigurationModel;


    
    private async Task EditWorkerConfiguration()
    {
        await _WorkerService.EditWorkerConfiguration(_workerConfigurationModel);
        NavigationManager.NavigateTo("WorkerConfigurationsList");
    }

    protected override void OnInitialized()
    {
       _workerConfigurationModel = _WorkerService.GetWorkerConfigurationById(Int32.Parse(workerConfigID));
    }
    
    
}