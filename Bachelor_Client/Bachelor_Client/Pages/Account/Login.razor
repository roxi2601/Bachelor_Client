@layout LoginLayout
@page "/"
@using Bachelor_Client.Services.Account
@using Bachelor_Client.Authentication
@using Bachelor_Client.Models
@using Bunit.Extensions
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IAccountService AccountService
@inject NavigationManager NavigationManager

    <div class="container-login100">
        <div class="wrap-login100">
            <div class="login100-form-title" style="background-image: url(css/background/background.jpg);">
                <span class="login100-form-title-1">
                    Log in
                </span>
            </div>

            <div class="login100-form ">
                <div class="wrap-input100 m-b-26">
                    <span class="label-input100">Email</span>
                    <input class="input100" type="text"placeholder="Enter email" @bind="_accountModel.Email" required>
                    <span class="focus-input100"></span>
                </div>

                <div class="wrap-input100 m-b-18">
                    <span class="label-input100">Password</span>
                    <input class="input100" type="password" placeholder="Enter password" @bind="_accountModel.Password" required>
                    <span class="focus-input100"></span>
                </div>
                <div style="color:red">@errorMessage</div>
                <div class="container-login100-form-btn">
                    <button class="login100-form-btn" @onclick="PerformLogin">
                        Login
          
                        @if (showSpinner)
                        {
                            <div class="spinner"></div>
                        }
                    </button>
                </div>
            </div>
        </div>
    </div>


@code {
    private Account _accountModel = new();
    private string errorMessage;
    private bool showSpinner;


    private async Task PerformLogin()
    {
        errorMessage = "";
        try
        {
            showSpinner = true;
            Account accountModel = await AccountService.GetLoggedAccount(_accountModel);
            if (!accountModel.Email.IsNullOrEmpty()) //TODO: change this
            {
               
                await ((AccountCustomAuthenticationStateProvider)AuthenticationStateProvider).ValidateLogin(accountModel);
                _accountModel.Email = "";
                _accountModel.Password = "";
                NavigationManager.NavigateTo("/home");
             
            }
            else
            {
                showSpinner = false;
                throw new Exception("Email or password are incorrect");
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            errorMessage = e.Message;
        }
    }

}}