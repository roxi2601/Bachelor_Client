@page "/Statistics"
@using Bachelor_Client.Services.WorkerConfig
@using Bachelor_Client.Services.Statistics
@using Bachelor_Client.Models
@using Bachelor_Client.Pages.StatisticsCharts
@inject IWorkerConfigService WorkerConfigService
@inject IWorkerStatistics WorkerStatisticsService
@layout WorkerConfigurationsLayout
<CascadingAuthenticationState>
    <AuthorizeView >
        <NotAuthorized>
            <body>
            <header class="bgimg-1" id="home">
                <div class="w3-display-left w3-text-white" style="padding-left: 5%">
                    <div class="container" style="background: none">
                        <span class="w3-jumbo w3-hide-small">Log in to see the content</span><br>
                        <span class="w3-xxlarge w3-hide-large w3-hide-medium">Log in to see the content</span><br>
                    </div>
                </div>
            </header>
            </body>
        </NotAuthorized>
        <Authorized>
            @if (_statisticsToDisplay.Count == 0)
            {
                <div class="spinner"></div>
            }
            else
            {
                <div class="container2">
                    <div class="row">
                        <div class="col-sm" style="margin-left: 10%; margin-top: 5%; align-content: center;">
                            <div class="containerStat" style="width: 100%; align-content: center; margin-left: 10%">


                                <table class='table' style=" color: black">
                                    <thead>
                                    <tr>
                                        <th class="url" style="width: 35%">Worker</th>
                                        <th class="isActive" style="width: 15%">Is Active</th>
                                        <th class="status" style="width: 15%">Status</th>
                                        <th class="duration" style="width: 15%">Duration (minutes)</th>
                                        <th class="actions" style="width: 15%"></th>
                                    </tr>
                                    </thead>
                                    <tbody>

                                    @foreach (StatisticsToDisplay workerStatistic in _statisticsToDisplay)
                                    {
                                        <tr>
                                            <td>@workerStatistic.URL</td>
                                            <td>@workerStatistic.isActive</td>
                                            <td>@workerStatistic.status</td>
                                            <td>@workerStatistic.duration</td>
                                            <td>@workerStatistic.ID</td>
                                            <button class="btn" @onclick="() => ShowChart_Click(workerStatistic)">
                                                <i class="fa fa-line-chart"></i>
                                            </button>
                                        </tr>
                                    }
                                    </tbody>
                                </table>


                            </div>

                        </div>
                        <div class="col-sm" style="margin-right: 10%; margin-top: 5%; align-content: center;">
                            @if (showCharts)
                            {
                                  <StatisticsCharts @ref="StatisticsChartsConfirmation" />
                            }

                        </div>
                    </div>
                </div>
            }
        </Authorized>
    </AuthorizeView>
</CascadingAuthenticationState>

@code{
    public bool showCharts = false;
    private StatisticsChartsBase StatisticsChartsConfirmation { get; set; }
  

    private List<Models.WorkerConfiguration> WorkerConfigList = new();
    private List<Models.WorkerStatistic> WorkerStatisticsList = new();
   

    /*public List<ModelTest> WorkerDetails = new List<ModelTest>()
    {
        new ModelTest() { URL = "Caca", numberOfFailedRuns = 12, isActive = true, status = "Running", duration = 20},
        new ModelTest() { URL = "Caca", numberOfFailedRuns = 12, isActive = true, status = "Running", duration = 20},
        new ModelTest() { URL = "Caca", numberOfFailedRuns = 12, isActive = true, status = "Running", duration = 20},
        new ModelTest() { URL = "Caca", numberOfFailedRuns = 12, isActive = true, status = "Running", duration = 20},
        new ModelTest() { URL = "Caca", numberOfFailedRuns = 12, isActive = true, status = "Running", duration = 20},
        new ModelTest() { URL = "Caca1", numberOfFailedRuns = 20, isActive = false, status = "Failed", duration = 50},
        new ModelTest() { URL = "Caca1", numberOfFailedRuns = 20, isActive = false, status = "Failed", duration = 50},
        new ModelTest() { URL = "Caca1", numberOfFailedRuns = 20, isActive = false, status = "Failed", duration = 50},
        new ModelTest() { URL = "Caca2", numberOfFailedRuns = 40, isActive = true, status = "Success", duration = 70},
        new ModelTest() { URL = "Caca2", numberOfFailedRuns = 40, isActive = true, status = "Success", duration = 70},
        new ModelTest() { URL = "Caca2", numberOfFailedRuns = 40, isActive = true, status = "Success", duration = 70},
        new ModelTest() { URL = "Caca3", numberOfFailedRuns = 60, isActive = true, status = "Success", duration = 90},
        new ModelTest() { URL = "Caca3", numberOfFailedRuns = 60, isActive = true, status = "Success", duration = 90},
        new ModelTest() { URL = "Caca3", numberOfFailedRuns = 60, isActive = true, status = "Success", duration = 90},
        new ModelTest() { URL = "Caca4", numberOfFailedRuns = 40, isActive = false, status = "Failed", duration = 10},
        new ModelTest() { URL = "Caca4", numberOfFailedRuns = 40, isActive = false, status = "Failed", duration = 10},
        new ModelTest() { URL = "Caca4", numberOfFailedRuns = 40, isActive = false, status = "Failed", duration = 10},
        new ModelTest() { URL = "Caca5", numberOfFailedRuns = 100, isActive = false, status = "Running", duration = 5},
        new ModelTest() { URL = "Caca5", numberOfFailedRuns = 100, isActive = false, status = "Running", duration = 5},
        new ModelTest() { URL = "Caca5", numberOfFailedRuns = 100, isActive = false, status = "Running", duration = 5},
    };*/

    private List<StatisticsToDisplay> _statisticsToDisplay = new();
    protected override async Task OnInitializedAsync()
    {
        WorkerStatisticsList = await WorkerStatisticsService.ReadAllWorkerStatistics();
        WorkerConfigList = await WorkerConfigService.ReadAllWorkerConfigurations();
        _statisticsToDisplay = ReadWorkerStatistics();
       
    }

    List<StatisticsToDisplay> ReadWorkerStatistics()
    {
        List<StatisticsToDisplay> statistics = new List<StatisticsToDisplay>();
        
            foreach (var workerStatistic in WorkerStatisticsList)
            {
                Models.WorkerConfiguration workerConfiguration =  WorkerConfigService.GetWorkerConfigurationById(workerStatistic.FkWorkerConfigurationId);
                int countNumberOfFailedRuns = 0;
                DateTime? start = workerStatistic.StartTime;
                DateTime? end = workerStatistic.EndTime;
                TimeSpan? calculateDuration = end -start;
                
                if (workerStatistic.Status == "Failed")
                {
                    countNumberOfFailedRuns++;
                }
            statistics.Add(new StatisticsToDisplay() { ID = workerStatistic.PkWorkerStatisticsId, URL = workerConfiguration.Url, duration = calculateDuration.Value.TotalMinutes, isActive = workerConfiguration.IsActive, numberOfFailedRuns = countNumberOfFailedRuns, status = workerStatistic.Status });
            statistics.Add(new StatisticsToDisplay() { ID = workerStatistic.PkWorkerStatisticsId, URL = workerConfiguration.Url + "1", duration = calculateDuration.Value.TotalMinutes, isActive = workerConfiguration.IsActive, numberOfFailedRuns =50, status = workerStatistic.Status });
            statistics.Add(new StatisticsToDisplay() { ID = workerStatistic.PkWorkerStatisticsId, URL = workerConfiguration.Url + "2", duration = calculateDuration.Value.TotalMinutes, isActive = workerConfiguration.IsActive, numberOfFailedRuns = 80, status = workerStatistic.Status });
            statistics.Add(new StatisticsToDisplay() { ID = workerStatistic.PkWorkerStatisticsId, URL = workerConfiguration.Url + "3", duration = calculateDuration.Value.TotalMinutes, isActive = workerConfiguration.IsActive, numberOfFailedRuns = 90, status = workerStatistic.Status });
            statistics.Add(new StatisticsToDisplay() { ID = workerStatistic.PkWorkerStatisticsId, URL = workerConfiguration.Url + "4", duration = calculateDuration.Value.TotalMinutes, isActive = workerConfiguration.IsActive, numberOfFailedRuns = 100, status = workerStatistic.Status });
        }
        return statistics;
    }



    private void ShowChart_Click(StatisticsToDisplay statistics)
    {
        showCharts = true;
        StatisticsChartsConfirmation.workerStatisticsID = statistics.ID;
        StatisticsChartsConfirmation.Show();
    }

}